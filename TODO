allow keywords?
  each keyword is its own type
  useful in the case of policies?

^type within macros for first class types
  maybe no need for generic syntax?

macros
  function arguments aren't visible
  allow proper lists as macro arguments without quoting
    for emit as well?

tuple and variadic functions

update readme with new generic function/macro syntax

generic functions as macros
  old way:
    (ƒ show : (:T) (o T) ()
      (print o))
    (show : (integer) 0)
    (show 0)

  new way:
    (ƒ⊕ show (T Ɐ) (o T) ()
      (print o))
    (show : (integer) 0)
    (show 0)

    (generic-struct (T Ɐ)
      (data T))

constraints on return types
  Allow dependent types there
  (ƒ foo () (:T-ret) where (^number? : (T-ret))
    42)

fix vim highlighting of falsey

REPL
  add repl trait and compile separate lib
    allow multiple definitions
  online repl sandbox
  irc bot for #jank
  tests for repl

custom types are dynamically allocated by default
  traits to control allocation? (later)
  reference counted a la shared_ptr
  copied on mutation
  explicit copy function as well
