**** to become a clojure dialect: ****
ast doc: https://clojure.github.io/tools.analyzer/spec/quickref.html

parsing
  parens: working, tested
  commas:
  comments:
  nil: working, tested
  integers: working, tested
  reals: working, tested
  bools: working, untested
  strings: working, tested
  chars:
  keywords
    simple: working, tested
    qualified: working, tested
    aliased: working, tested
  maps: working, tested
  vectors: working, tested
  sets: working, tested
  lists:
  regexes: working, tested
  identifiers
    simple: working, tested
    qualified: working, tested
  special forms
    def: working, tested
    if: working, tested
    do: working, tested
    let:
    quote:
    var:
    fn: working, tested
    loop:
    recur:
    throw:
    try:
    monitor-enter:
    monitor-exit:
  applications: working, tested
  destructuring:
  macros:
  reader macros
    anonymous shorthand fns:
    regex:
    var:
    conditionals:

grammar
  manually specify whitespace
  don't have grammar for bools and nil at all?
    true, false, and nil can be defs

primitive types like Julia?

organization
  group all literals: nil bool keyword symbol string number map vector set seq char regex var

**** type features: ****

fully declarative
  definition order doesn't matter
  referencing undefined things doesn't fail until everything has been checked
  this allows for cyclical dependencies

tracking function purity
  all std lib fns are annotated as pure
  all other fns are compositions of std lib fns
  interop is impure

gradual static typing?
  by default, only the essentials are type checked
  the compiler will only raise a type error when it's certain something is wrong
  type annotations can be added, which are used at compile-time

functions are generic by default
  all std lib fns have type annotations
  all other fns are compositions of std lib fns
  interop requires annotations (or is type-unsafe?)

compile-time evaluation of literals and pure fns
  any literals composed entirely of pure fns are evaluated at compile-time
  any operations done to those literals are propagated at compile-time

zero-allocation containers
  any compile-time literal at code gen will use this container
    (conj [1 2] 3) results in a code gen static-vector [1 2 3]
  static-string, static-vector, static-map, static-set

polymorphism comes from function specialization
  functions can be specified with partial or fully specialized types
  functions from any namespace can be specialized from any other

syntax for type specifiers
  ???

syntax for generic fn definitions
  fns can refer to symbols in a special way, to note that they're polymorphic
    maybe ~t
  those symbols may be referenced multiple times in the fn and must all balance

syntax for type definitions
  ???

**** what's needed to make jank usable: ****

website style
  similar to http://eta-lang.org/
  also emacs site

implement generic functions first
  take an integer or string or T

then follow up with generic types
  first parameterized on types
  then add support for constraints
  then add support for values

adopt core.typed

adopt clojure.spec
  need namespaced keywords

address generic construction of items
  given a T and some args, how can I construct a T, passing the args to the ctor?

namespacing
  imports
  treat / in any identifier as namespacing
  allow cyclical dependencies!
  require everything be in a namespace; only prelude exists in global ns

basic stdlib (two layers: core and aux) -- core can run in kernel
  arithmetic, logic, bit ops
  basic IO
  persistent immutable data structures
  higher-order functions
  generics are the big issue
    use macros entirely? functions, structs, enums, macros, all generic
      yes, absolutely
      put instantiations in secret namespace
      have the function macro handle generics and check for current instantiations
      once implemented, remove normal functions entirely
        everything is generic by default and type specification is optional
      syntax/eval constructs for returning
    use core.logic
      first use it for overload resolution
    integrate with function calls; require explicit types
    ensure returns work
    add type deduction

compile-time type for string literals
  "foo" => static-string : (3)
  allows for easier string usage without dynamic allocations, a la string_view

all functions are generic by default
  type specifiers are optional and not preferred
    specified with :: to disambiguate from generics
  return types need to be specified; ∀ will remain the most common
  functions may return multiple types; compiler should automatically use sum

type-safe heterogenous maps
  conjoining may return a different type
  generic type has possible key->value types, using sum where needed
    requires matching all possible variants; maybe too cumbersome
  map<string, int> conj string:float yields map<string, sum<int, float>>
  map<string, int> conj foo:bar yields map<string, int, foo, bar>

structs
  destructors
    specialize /std/destroy
      requires generics? just overloading?
  more tests!

read command-line arguments from a separate file
  don't bother with the target macro yet

** everything else: **
rename to kio? disciple? idiolisp?

figure out logo

write the extra compilation args to a file

long-term macros should be predicative pattern matching
  defining a syntax allows arbitrary nesting of predicates
  maybe with regex-like specifiers?

  (bind-syntax (let ((identifer? expression?)+)
                 expression?+))

  how can I distinguish 'let' from a predicate? see racket's macros

better logging
  timbre (allows profiling, too)

sanitize idents which are keywords in backend language

passing first class overloaded declared functions
  implicitly wrap every function identifier in a lambda
    (λ (& args) (∀)
      (apply func args))

remove function-call from grammar; just use lists
  it becomes unhelpful with macros

consider allowing param packs to not be last
  perform matching as needed
  (ƒ shout (s string &strings i int &ints) () ...)


use bind and declare as expressions

tests
  comments within forms
    including functions
  keywords
  codegen
    returning an integer literal and a jank integer from an if should work
  code execution (functional tests)
  static analysis of generated code

targets
  each target has its own prelude
    c++
    bash
    opencl
    nix
    forth
    vimscript

  (#target c++
           (dependencies "gl/gl.h")
           (command-line "-ggdb -Og -lGL"))

  prelude isn't included until #target macro is used

allow keywords?
  each keyword is its own type
  useful in the case of policies?
  just resolved to integers? hash of key name?

^type within macros for first class types
  maybe no need for generic syntax for macros?

constraints on return types
  Allow dependent types there
  (ƒ foo () (:T-ret) where (^number? : (T-ret))
    42)

REPL
  online repl sandbox
  irc bot for #jank
  tests
