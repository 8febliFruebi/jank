<program> = atom*
<atom> = string / number / boolean /
         identifier / keyword /
         lambda-definition /
         macro-definition /
         binding-definition /
         if-expression /
         type-declaration /
         binding-declaration /
         struct-definition /
         new-expression /
         syntax-definition /
         escaped-item /
         macro-function-call

integer = #'[+-]?\d+'
real = #'[+-]?\d+\.\d*'
<number> = (integer | real)

<double-quote> = '\"'
<not-double-quote> = #'[^\"]*'
string = <double-quote> not-double-quote <double-quote>

<identifier-text> = #'[^\s"\'()\d:][^\s"\'()]*'
identifier = identifier-text generic-specialization?
keyword = <':'> identifier
special-identifier = declare-keyword | bind-keyword | macro-keyword | if-keyword | lambda-keyword | struct-keyword | ';'

boolean = 'true' | 'false'

<left-paren> = <'('>
<right-paren> = <')'>

<lambda-keyword> = <'lambda'> | <'Î»'>
argument-list = left-paren (identifier type)* right-paren
return-list = left-paren type? right-paren
lambda-definition =
  left-paren lambda-keyword argument-list return-list
    atom*
  right-paren

specialization-list = left-paren
                        (type | specialization-list)*
                      right-paren
<generic-specialization> = <':'> specialization-list
macro-function-call =
  left-paren !special-identifier (identifier | macro-function-call | lambda-definition)
    atom*
  right-paren

type = identifier

<macro-keyword> = <'ast-macro'>
macro-argument-list = left-paren identifier+ right-paren
macro-definition =
  left-paren macro-keyword identifier macro-argument-list
    atom*
  right-paren

<syntax-keyword> = <'syntax'>
syntax-item = identifier | string | number | boolean | identifier | keyword | syntax-escaped-item
syntax-list =
  left-paren
    (syntax-list | syntax-item)*
  right-paren
syntax-definition =
  left-paren syntax-keyword
    (syntax-list | syntax-item)+
  right-paren

<escape-keyword> = <'escape'>
syntax-escaped-item =
  left-paren escape-keyword
    (syntax-list | syntax-item)+
  right-paren

escaped-item =
  left-paren escape-keyword
    atom+
  right-paren

<bind-keyword> = <'bind'>
binding-definition = left-paren bind-keyword identifier type? atom right-paren

<if-keyword> = <'if'>
condition = atom
then = atom
else = atom
if-expression = left-paren if-keyword condition
                  then
                  else?
                right-paren

<declare-keyword> = 'declare' | 'declare-extern'
type-declaration = left-paren declare-keyword
                    type
                   right-paren
binding-declaration = left-paren declare-keyword
                        identifier type
                      right-paren

<struct-keyword> = <'struct'>
struct-member = left-paren identifier type right-paren
struct-definition = left-paren struct-keyword identifier
                      struct-member+
                    right-paren

<new-keyword> = <'new'>
new-expression = left-paren
                   new-keyword generic-specialization atom*
                 right-paren
