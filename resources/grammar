<program> = (<comment> / statement)*
<statement> = string / number / boolean /
              identifier / keyword /
              lambda-definition /
              macro-definition /
              binding-definition /
              if-expression /
              binding-declaration /
              type-declaration /
              struct-definition /
              function-call
<atom> = statement /
         list

integer = #'[+-]?\d+'
real = #'[+-]?\d+\.\d*'
<number> = (integer | real)

<double-quote> = '\"'
<not-double-quote> = #'[^\"]*'
string = <double-quote> not-double-quote <double-quote>

identifier = #'[^\s"\'()\d:][^\s"\'()]*' generic-specialization?
keyword = <':'> identifier
special-identifier = declare-keyword | bind-keyword | macro-keyword | if-keyword | lambda-keyword | struct-keyword

boolean = 'true' | 'false'

<left-paren> = <'('>
<right-paren> = <')'>
list = left-paren !special-identifier atom* right-paren

<lambda-keyword> = <'lambda'> | <'Î»'>
argument-list = left-paren (identifier type)* right-paren
return-list = left-paren type? right-paren
lambda-definition =
  left-paren lambda-keyword argument-list return-list
    atom*
  right-paren

specialization-list = left-paren
                        (type | specialization-list)*
                      right-paren
<generic-specialization> = <':'> specialization-list
function-call =
  left-paren !special-identifier (identifier | function-call | lambda-definition)
    atom*
  right-paren

type = identifier

<macro-keyword> = <'macro'>
<generic-list> = list
macro-definition =
  left-paren macro-keyword identifier generic-list argument-list
    atom*
  right-paren

<bind-keyword> = <'bind'>
binding-definition = left-paren bind-keyword identifier type? atom right-paren

<if-keyword> = <'if'>
condition = atom
then = atom
else = atom
if-expression = left-paren if-keyword condition
                  then
                  else?
                right-paren

<declare-keyword> = 'declare' | 'declare-extern'
binding-declaration = left-paren declare-keyword
                        (identifier type)
                      right-paren
type-declaration = left-paren declare-keyword
                    type
                   right-paren

<struct-keyword> = <'struct'>
struct-member = left-paren identifier type atom? right-paren
struct-definition = left-paren struct-keyword identifier
                      struct-member+
                    right-paren

comment = <'(;'> inside-comment* <';)'>
<inside-comment> = !(';)' | '(;') #'[\s\S]\s*' | comment
