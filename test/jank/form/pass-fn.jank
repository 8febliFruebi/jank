; Invoking right away.
(assert (= ((fn* [] 1)) 1))
(assert (= ((fn* [a] a) 1) 1))
(assert (= ((fn* [a b] [a b]) 1 2) [1 2]))

; Closures.
(def add-n (fn* [n]
             (fn* [x]
               (+ x n))))
(def add-10 (add-n 10))
(assert (= (add-10 -5) 5))

; Closures skipping a level.
(def combine (fn* [n]
               (fn* [] ; This will implicitly capture n as well.
                 (fn* [x] ; This explicitly captures n.
                   [n x]))))
(def combine-20 ((combine 20)))
(assert (= (combine-20 25) [20 25]))

; Multiple arities.
(def add
  (fn*
    ([] 0)
    ([a] a)
    ([a b] (+ a b))))
(assert (= (add) 0))
(assert (= (add -500) -500))
(assert (= (add -500 50) -450))

; Variadic arities.
(def variadic
  (fn*
    ([] 0)
    ([a] 1)
    ([a b] 2)
    ([a b & args] args)))
(assert (= (variadic) 0))
(assert (= (variadic :meow) 1))
(assert (= (variadic 'wow 'two) 2))
(assert (= (variadic 'wow 'two {} nil :meow) [{} nil :meow]))

; Dynamic call to variadic fn.
(def dynamic+variadic
  (fn* [f]
    (f 'wow 'two {} nil :meow)))
(assert (= (dynamic+variadic variadic) [{} nil :meow]))

:success
